서블릿, JSP

JAVA 소스 생성 : 특수한 형태의 서블릿
=> 컴파일 => 인스턴스 생성 => jspinit()
=> _jspservice()


jsp 핵심 메소드(jspInit jspDestroy _jspservice)

WAS
<%! %> : 선언식 : 클래스안에 삽입되어 메서드를 선언을 하는 부분
<% %> : 스크립트릿 : 서블릿 코드 삽입
<%= %> : 표현식 : 변수 출력
-----------------------------------------------------------
request : setAttribute(key, value) / getAttribute()
el/jstl (값 자체를 표기할 떄는 el / 조건문 반복문을 사용할 떄는 jstl)

forward
request scope : 기존 서블릿에 요청했던 데이터를 다른 서블릿으로 이동하면서 그 정보가 유지되어 출력되는 과정
 => 이러한 다른 서블릿에 이동하는 과정을 forward라고 한다.

page scope(지역변수) - jsp 내에서 사용되는 스코프

redirect
리다이렉트를 하게 되면 302 상태코드를 보내게 된다.(HTTP프로토콜 - 302(임시 이동): 현재 서버가 다른 위치의 페이지로 요청에 응답하고 있지만 요청자는 향후 요청 시 원래 위치를 계속 사용해야 한다.)
브라우저 => 서블릿 = 상태코드 + 경로 => 브라우저는 바로 경로를 요청하게된다.

 - forward는 같은 애플리케이션만 되는데, 리다이렉트는 다른 서버에서도 요청이 보낼수 있다.
 = 파라미터로 값을 전달할 수 있지만, 큰 값을 보낼수 없다.(큰값이라고 하면, 2,083 character)
 - response.senRedirect();
---------------------------------------------------------------------------------------
el, jstl
format, core
프로퍼티
글쓰기,

MVC Model 1 vs MVC Model 2
-----------------------------------------------------------------------------------
2019-01-10

1) Cookie
클라이언트가 서버에게 reqeust에 getCookies라는 Cookie 배열을 가져다 준다.
 => 클라이언트가 쿠키를 몇 개를 가질수 있는가?
 => 서버는 클라이언트에게 response.addCookie를 보낼수 잇고, 많은 양을 보낼수 없다.
 => 디스크에 저장된다.
 => 모든 도메인에 3000개
 => 한 사람당 300

2) Session
 => 클라이언트는 요청정보를 서버에 보내고 서버는 세션id과 Session을 저장한다. HttpSession(Key:String, Value: Object)
 => 세션id가 저장되면, 돌아 갈 때, 세션id를 클라이언트에 보내고, 다시 필요하면 세션id를 보내서 세션을 저장한다.
 => request.getSession
 => sesstion.setAttribute();
 => sesstion.getAttribute(); / 형변환을 해줘야함.
 => 이러한 방법은 Session scope
 => 다시 가지고 오면 세션id를 키로가지고 value값을 가지고 온다.

Cookie와 HttpSession이 어떤 메서드를 가지고 있는지.

