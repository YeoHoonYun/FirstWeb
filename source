서블릿, JSP

JAVA 소스 생성 : 특수한 형태의 서블릿
=> 컴파일 => 인스턴스 생성 => jspinit()
=> _jspservice()


jsp 핵심 메소드(jspInit jspDestroy _jspservice)

WAS
<%! %> : 선언식 : 클래스안에 삽입되어 메서드를 선언을 하는 부분
<% %> : 스크립트릿 : 서블릿 코드 삽입
<%= %> : 표현식 : 변수 출력
-----------------------------------------------------------
request : setAttribute(key, value) / getAttribute()
el/jstl (값 자체를 표기할 떄는 el / 조건문 반복문을 사용할 떄는 jstl)

forward
request scope : 기존 서블릿에 요청했던 데이터를 다른 서블릿으로 이동하면서 그 정보가 유지되어 출력되는 과정
 => 이러한 다른 서블릿에 이동하는 과정을 forward라고 한다.

page scope(지역변수) - jsp 내에서 사용되는 스코프

redirect
리다이렉트를 하게 되면 302 상태코드를 보내게 된다.(HTTP프로토콜 - 302(임시 이동): 현재 서버가 다른 위치의 페이지로 요청에 응답하고 있지만 요청자는 향후 요청 시 원래 위치를 계속 사용해야 한다.)
브라우저 => 서블릿 = 상태코드 + 경로 => 브라우저는 바로 경로를 요청하게된다.

 - forward는 같은 애플리케이션만 되는데, 리다이렉트는 다른 서버에서도 요청이 보낼수 있다.
 = 파라미터로 값을 전달할 수 있지만, 큰 값을 보낼수 없다.(큰값이라고 하면, 2,083 character)
 - response.senRedirect();
---------------------------------------------------------------------------------------
el, jstl
format, core
프로퍼티
글쓰기,

MVC Model 1 vs MVC Model 2
-----------------------------------------------------------------------------------
2019-01-10

1) Cookie
클라이언트가 서버에게 reqeust에 getCookies라는 Cookie 배열을 가져다 준다.
 => 클라이언트가 쿠키를 몇 개를 가질수 있는가?
 => 서버는 클라이언트에게 response.addCookie를 보낼수 잇고, 많은 양을 보낼수 없다.
 => 디스크에 저장된다.
 => 모든 도메인에 3000개
 => 한 사람당 300

2) Session
 => 클라이언트는 요청정보를 서버에 보내고 서버는 세션id과 Session을 저장한다. HttpSession(Key:String, Value: Object)
 => 세션id가 저장되면, 돌아 갈 때, 세션id를 클라이언트에 보내고, 다시 필요하면 세션id를 보내서 세션을 저장한다.
 => request.getSession
 => sesstion.setAttribute();
 => sesstion.getAttribute(); / 형변환을 해줘야함.
 => 이러한 방법은 Session scope
 => 다시 가지고 오면 세션id를 키로가지고 value값을 가지고 온다.

Cookie와 HttpSession이 어떤 메서드를 가지고 있는지.

-- 이게 아닐 수도 있다는 생각!!

JDK 설치
WAS

IDE => 자바 - JVM

IDE : 웹 어플리케이션 작성 -> RunTime 설정(WAS 설정)
작성을 하면 WAS가 JVM을 실행하면서 배포(deploy)됨.

tomcat.apache.org
/홈디렉토리/압축

bin : 실행파일
conf : 설정파일
lib : 관련된 라이브러리
logs : 로그
webapps : 웹 어플리케이션(하나의 was는 여러개의 웹 어플리케이션을 올릴 수 있다.)

Web Application 구조, 배포(deploy)

폴더 - WEB-INF - web.xml (서블릿스펙 3.0이상에서는 없어도 된다. - 웹 어플리케이션을 배포하기 위한 설정 파일)

	 - lib - 해당 웹 어플리케이션에서 사용하는 jar파일
	 - classes - 여러분이 작성한 java class등
	 - 다양한 폴더, jsp
 - 각종 폴더, 파일( jsp, html, css, js ....)

위의 폴더가 webapps 폴더에 있으면, Tomcat이 실행 할 떄 자동으로 실행한다.

보통은 위의 폴더 아래의 내용으 jar라는 명령으로 묶는다. 확장자를 war이라는 파일로 만들어서 배포한다.

ex> 폴더 이름이 board라고 하면, board아래의 내용을 board.war라는 파일로 압축한다. 해당 파일을 webapps 폴더에 복사를 하면, Tomcat이 실행될때, 자동으로 압축을 해제하고, 실행해 준다.

그 외에 방법으로, tomcat의 mavager를 이용하여 war파일을 배포 할 수 있다.

* jsp / 서블릿에 대한 것의 기본적인 것을 잘 해보도록 한다.
* 자바 8 람다식

-----------------------------------------------

tomcat 설치폴더 - bin : tomcat 실행과 관련된 파일이 있다.
tomcat을 실행파일 : win - startup.bat / li : shartup.sh

Linux 공부 : 퍼미션에 대한 정보

startup.sh, startup.bat를 실행 한 후, http://localhost:8080
이라고 하면 webapps/ROOT 라고 되어 있는 웹애플리케이션의 결과가 보여진다.

http://localhost:8080/index.jsp을 입력하자.
http://localhost:8080/

http프로토콜의 요청라인에는 GET / 을 요청하게 된다.
WAS는 /요청을 받으면 welcome-page를 찾아서 보여준다.
(web.xml 에서 다르게 설정할 수 있다.)

http://localhost:8080/examples/
위의 경로는 /webapps/examples 아래의 index.html, index.jsp에 저장된다.

---------------------------------------------
URL 주소
http[s]://ip:port/{context path} /path [?] 파라미터들
파다미터들 : 이름=값 & 이름=값 ......

보통 하나의 리소스, Servlet, JSP가 URL호출시 사용된다.
쉽게 설명하자면, URL주소가 10개 사용된다면 리소스, Servlet, JSP가 10개 있다.

https://raysoda.com/
context path = ""
path /home51382 : path의 일정 부분이 변수처럼 사용 PathVariable


2019-01-08

HTTP 프로토콜의 특징
 - 요청/응답 모델
 - 상태 유지가 안된다.

브라우저 => 요청 정보
        <= 응답

Tomcat(WAS)
 - http://ip:port/context path/path
             ---------------------- GET(HTTP 메소드) {path} {버전}

HTTP 요청정보를 요청 객체로 담아서 처리하도록 한다.(응집도가 높다. 결합도는 낮아야한다.)
HttpServletRequest, HttpServletResponse 객체를 WAS가 생성한다.
 - Context path값을 구해서 해당하는 웹 애플리케이션이 있는지 찾아 봄.
 - path에 해당하는 리소스(정적), 서블릿, jsp(동적)가 있는지 찾아본다.
 - 정적일 경우, DefalutServlet을 가지고 있음. 그래서 해당하는 path의 경로를 보내줌. => 웹서버의 역할을 하는거
 - 동적일 경우, HttpServletRequest, HttpServletResponse를 실행하여 응답으로 보낸다.

브라우저
 -> HttpServletRequest  ∥
 -> HttpServletResponce => 서블릿 필터(0개 이상) => 서블릿, JSP, 리소스
                            들어갈때는 1,2,3,4  <=
                            나갈 떄는 4,3,2,1
서블릿
 - HttpServlet API
 - HttpServlet이라는 객체를 상속받는 클래스를 만듬. <-
 - init(), destroy(), service(request, response)
 - doGet()
 - doPost()
 - doDelete()

동적 abstract HttpServlet라는 추상클래스를 생성한다.
서블릿을 만들지만, 실제 서블릿은 WAS가 실행시킨다.
 - service 메서드가 실행된다.
 - service(HttpServletRequest req, HttpServletResponse resp)
           Receives standard HTTP requests from the public service method and dispatches them to the doXXX methods defined in this class.
 - service(ServletRequest req, ServletResponse res)
           Dispatches client requests to the protected service method.

IoC(제어의 역전) - 내가 만든것을 실행하는 것은 다른 프로그램(WAS)가 실행한다.
 -> 서블릿 라이프 사이클

 ---------------------------------------------------------
 HttpServlet은 해당 Context path를 담고 있다. 해당 패스는 아래와 같이 사용된다.
 HttpServlet <- Hello Servlet -PATH : 3.0 미만은 Web.xml으로 사용하고, / 3.0이상은 @애노테이션을 사용

 객체는 해당 HttpServlet이 메모리에 없으면 init()통하여 인스턴스를 생성한다.(서블릿은 메모리에 하나만 실행된다.)

 실행하면 service()메소드가 실행한다.
  => 여러개가 동시에 쓰레드로 실행되고 1개의 객체는 공유객체로 생성한다.(필드가 있으면 문제가 있으니, Hello Servlet에 필드를 넣지않는다.- 문제가 없다면 괜찮음.)

 service(request, response)
  - service가 오버라이딩이 된다면, 모든 HTTP메서드가 요청이 오든 상관없이 작성된다.
  - request는 HTTP메소드(GET, POST 등)을 보내줌. 그래서 if문으로 구분을 해서 처리하도록 되어 있다. 그래서 해당 서블릿이 만들어 진다면 자식의 doGet이 호출됨.
    => 이러한 방식을 템플릿 메서드라고 한다.


--------------------------------------------------------------
jsp는 시작하는 사람이 제일 느림.
서블릿 : JAVA 0 / HTML X
JSP : 메모리에 있는지 없는지?
없으면 특수한 서블릿 소스로 되고 컴파일 => 메모리에 올림, jsp Init()
그렇게 되면 => jsp service()

out은 톰캣이 만들어지고,
in은 알아서 만들어서 출력한다.

jsp는 한번 만들어 놓으면 수정이 어렵다.
=> MVC Model 1,2

# 세션 및 쿠키 삭제 방법
# 내장객체